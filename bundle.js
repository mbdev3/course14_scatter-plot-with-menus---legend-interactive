(function (React$1, ReactDOM, d3, ReactDropdown) {
  'use strict';

  var React$1__default = 'default' in React$1 ? React$1['default'] : React$1;
  ReactDOM = ReactDOM && Object.prototype.hasOwnProperty.call(ReactDOM, 'default') ? ReactDOM['default'] : ReactDOM;
  ReactDropdown = ReactDropdown && Object.prototype.hasOwnProperty.call(ReactDropdown, 'default') ? ReactDropdown['default'] : ReactDropdown;

  const csvUrl ='https://gist.githubusercontent.com/curran/a08a1080b88344b0c8a7/raw/0e7a9b0a5d22642a06d3d5b9bcbad9890c8ee534/iris.csv';

  const useData = ()=>{
  const [data, setData] = React$1.useState(null);

    React$1.useEffect(() => {
      const row = (d) => {
      d.sepal_length = +d.sepal_length;
         d.sepal_width = +d.sepal_width;
         d.petal_length = +d.petal_length;
         d.petal_width = +d.petal_width;
        
       
        return d;
      };
      d3.csv(csvUrl, row).then(setData );
    }, []);
  return data
  };

  const AxisBottom = ({
    xScale,
    innerHeight,
    tickFormat
  }) =>
    xScale.ticks().map((tickValue) => (
      React.createElement( 'g', { className: "tick", key: tickValue, transform: `translate(${xScale(
        tickValue
      )},0)` },
        React.createElement( 'line', { y2: innerHeight }),
        React.createElement( 'text', {
          style: { textAnchor: 'middle' }, y: innerHeight + 15, dy: "0.71rem" },
          tickFormat(tickValue)
        )
      )
    ));

  const AxisLeft = ({yScale,innerWidth}) => yScale.ticks().map((tickValue) => (
            
              React.createElement( 'g', { className: "tick", transform: `translate(0,${yScale(tickValue)})` },
        			React.createElement( 'line', { x2: innerWidth }), " //y1=", yScale(tickValue), " y2=", yScale(tickValue),
              React.createElement( 'text', {
                key: tickValue, style: { textAnchor: 'end' }, x: -15, dy: ".32em" },
                tickValue
              )
      )
            
          ));

  const Marks = ({data,yScale,xScale,xValue,yValue,tooltipFormat,circleRadius,colorScale,colorValue}) => data.map((d) => (
            React.createElement( 'circle', { className: 'mark', fill: colorScale(colorValue(d)), cx: xScale(xValue(d)), cy: yScale(yValue(d)), r: circleRadius },
    
      React.createElement( 'title', null, tooltipFormat(xValue(d)) )
    )
          ));

  const ColorLegend = ({
    colorScale,
    tickSize = 10,
    spacing = 40,
    onHover,
    hoveredValue,
    fadeOpacity
  }) => {
    return colorScale
      .domain()
      .map((domainValue, i) => (
        React.createElement( 'g', {
          className: "tick", transform: `translate(0,${i * spacing})`, onMouseEnter: ()=>onHover(domainValue), onMouseOut: ()=>onHover(null), opacity: hoveredValue && domainValue !== hoveredValue ? fadeOpacity : 1 },
          React.createElement( 'circle', {
            fill: colorScale(domainValue), r: tickSize }),
          React.createElement( 'text', { dy: '.32em', dx: '1em' },
            domainValue
          )
        )
      ));
  };

  const width = window.innerWidth;
  const height = window.innerHeight;
  const margin = {
    top: 20,
    bottom: 120,
    right: 150,
    left: 100,
  };

  const App = () => {
    const data = useData();
    const [
      hoveredValue,
      setHoveredValue,
    ] = React$1.useState(null);
    const initialXAttribute = 'petal_length';
    const [xAttribute, setXAttribute] = React$1.useState(
      initialXAttribute
    );
    const xValue = (d) => d[xAttribute];

    const initialYAttribute = 'sepal_width';
    const [yAttribute, setYAttribute] = React$1.useState(
      initialYAttribute
    );

    const yValue = (d) => d[yAttribute];
    const colorValue = (d) => d.species;

    if (!data) {
      return React$1__default.createElement( 'pre', null, "loading.." );
    }
    // console.log(data.columns);

    let attributes = [];
    data.columns.map((item) => {
      attributes = [
        ...attributes,
        {
          value: item,
          label: item.replace(/_/gi, ' '),
        },
      ];
    });
    console.log(attributes);

    const innerHeight =
      height - margin.top - margin.bottom;
    const innerWidth =
      width - margin.right - margin.left;

    const xScale = d3.scaleLinear()
      .domain(d3.extent(data, xValue))
      .range([0, innerWidth]).nice();
      
  console.log(d3.extent(data, yValue));
    const yScale = d3.scaleLinear()
      .domain(d3.extent(data, yValue))
      .range([innerHeight, 0]).nice();
      

    const siFormat = d3.format('.2s');
    const xAxisTickFormat = (tickValue) =>
      siFormat(tickValue).replace('G', 'B');
    const tooltipFormat = (tickValue) =>
      d3.format(',.2r')(tickValue).replace('G', 'B');

    const colorScale = d3.scaleOrdinal()
      .domain(data.map(colorValue))
      .range(['#E2BA00', '#42A4B5', '#684665']);
    // console.log(colorScale.domain());

    const filteredData = data.filter(
      (d) => hoveredValue === colorValue(d)
    );
  const fadeOpacity = 0.2;
    return (
      React$1__default.createElement( React$1__default.Fragment, null,
        React$1__default.createElement( 'g', { className: 'menu' },  
        React$1__default.createElement( 'label', { for: "x-select" }, "X"),
        React$1__default.createElement( ReactDropdown, {
          options: attributes, value: xAttribute, onChange: ({ value }) =>
            setXAttribute(value) }),
        React$1__default.createElement( 'label', { for: "y-select" }, "Y"),
        React$1__default.createElement( ReactDropdown, {
          options: attributes, value: yAttribute, onChange: ({ value }) =>
            setYAttribute(value) })
  ),
        React$1__default.createElement( 'svg', { width: width, height: height },
          React$1__default.createElement( 'g', {
            transform: `translate(${margin.left},${margin.top})` },
            React$1__default.createElement( AxisBottom, {
              innerHeight: innerHeight, xScale: xScale, tickFormat: xAxisTickFormat }),
            React$1__default.createElement( AxisLeft, {
              yScale: yScale, innerWidth: innerWidth }),
            React$1__default.createElement( 'text', {
              className: "label", textAnchor: "middle", x: innerWidth / 2, y: height - margin.bottom / 1.4 },
              xAttribute.replace(/_/gi, ' ')
            ),
            React$1__default.createElement( 'text', {
              className: "label", textAnchor: "middle", transform: `translate(${
              -margin.left / 2
            },${innerHeight / 2}) rotate(-90)` },
              yAttribute.replace(/_/gi, ' ')
            ),
            React$1__default.createElement( 'g', {
              transform: `translate(${
              innerWidth + 40
            },${50})` },
              ' ',
              React$1__default.createElement( ColorLegend, {
                colorScale: colorScale, onHover: setHoveredValue, hoveredValue: hoveredValue, fadeOpacity: fadeOpacity }),
              React$1__default.createElement( 'text', {
                className: "label", textAnchor: "middle", dx: "30", dy: "-30" },
                'Species'
              )
            ),
            React$1__default.createElement( 'g', { opacity: hoveredValue ? fadeOpacity : 1, style: { transition: "all 0.3s linear"} },
              React$1__default.createElement( Marks, {
                data: data, xScale: xScale, yScale: yScale, xValue: xValue, yValue: yValue, colorScale: colorScale, colorValue: colorValue, tooltipFormat: tooltipFormat, circleRadius: 10, style: { transition: "all  0.3s linear"} })
            ),
            React$1__default.createElement( Marks, {
              data: filteredData, xScale: xScale, yScale: yScale, xValue: xValue, yValue: yValue, colorScale: colorScale, colorValue: colorValue, tooltipFormat: tooltipFormat, circleRadius: 10 })
          )
        )
      )
    );
  };

  const rootElement = document.getElementById(
    'root'
  );
  ReactDOM.render(React$1__default.createElement( App, null ), rootElement);

}(React, ReactDOM, d3, ReactDropdown));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,